{"mappings":"AA2eE;;;;;;;;A;;;;;AAYA;;;;;;AAKA;;;;AAGA;;;;;;;AAMA;;;;;;;AAMA;;;;;AAIA","sources":["src/PointsPlotComp.vue"],"sourcesContent":["<template>\r\n  <div id=\"container\">\r\n    <svg\r\n      :width=\"width\"\r\n      :height=\"height\"\r\n    >\r\n      <g>\r\n        <!--draw the title-->\r\n        <text\r\n          v-if=\"title\"\r\n          class=\"titles\"\r\n          :font-size=\"28\"\r\n          :x=\"width / 2\"\r\n          :y=\"titleY\"\r\n        >\r\n          {{ title }}\r\n        </text>\r\n        <!--draw the subTitle-->\r\n        <text\r\n          v-if=\"subTitle\"\r\n          class=\"titles\"\r\n          :font-size=\"20\"\r\n          :x=\"width / 2\"\r\n          :y=\"subtitleY\"\r\n        >\r\n          {{ subTitle }}\r\n        </text>\r\n        \r\n        <!--draw x axis-->\r\n        <g\r\n          id=\"xAxisGroup\"\r\n          :transform=\"translateXAxis\"\r\n        >\r\n          <!--draw horizontal line-->\r\n          <path \r\n            class=\"ticLines\"\r\n            :d=\"drawXaxis\"\r\n          />\r\n          <!--draw tic lines-->\r\n          <path \r\n            v-for=\"(item, index) in xTics\"\r\n            :key=\"index\"\r\n            class=\"ticLines\"\r\n            :d=\"drawXtic(item)\"\r\n          />\r\n          <!--draw tic labels-->\r\n          <text\r\n            v-for=\"(item, index) in xTics\"\r\n            :key=\"index\"\r\n            class=\"ticLabels\"\r\n            :x=\"item.loc\"\r\n            :y=\"20\"\r\n          >\r\n            {{ item.label }}\r\n          </text>\r\n          <!--draw x axis label-->\r\n          <text\r\n            class=\"axisTitle\"\r\n            :x=\"ctrWidth / 2\"\r\n            :y=\"50\"\r\n          >\r\n            {{ xLabel }}\r\n          </text>\r\n        </g>\r\n\r\n        <!--draw y axis-->\r\n        <g\r\n          id=\"yAxisGroup\"\r\n          :transform=\"translateYAxis\"\r\n        >\r\n          <!--draw vertical line-->\r\n          <path\r\n            class=\"ticLines\"\r\n            :d=\"drawYaxis\"\r\n          />\r\n          <!--draw tic lines-->\r\n          <path\r\n            v-for=\"(item, index) in yTics\"\r\n            :key=\"index\"\r\n            class=\"ticLines\"\r\n            :d=\"drawYtic(item)\"\r\n          />\r\n          <!--draw tic labels-->\r\n          <text\r\n            v-for=\"(item, index) in yTics\"\r\n            :key=\"index\"\r\n            class=\"ticLabels\"\r\n            :x=\"-20\"\r\n            :y=\"item.loc\"\r\n          >\r\n            {{ item.label }}\r\n          </text>\r\n          <!--draw y axis label-->\r\n          <text\r\n            :x=\"-ctrHeight / 2\"\r\n            :y=\"-marginLeft + 15\"\r\n            :style=\"yLabelStyle\"\r\n          >\r\n            {{ yLabel }}\r\n          </text>\r\n        </g>\r\n\r\n        <!--draw points-->\r\n        <g\r\n          id=\"pointsGroup\"\r\n          :transform=\"translatePoints\"\r\n        >\r\n          <g v-for=\"group in getGroups\">\r\n            <circle class=\"points\" v-for=\"i in group.length\"\r\n              :style=\"{stroke: group[i-1].stroke}\"\r\n              :fill=\"group[i-1].fill\"\r\n              :cx=\"(group[i-1].x - xLimits.min) * xScale\"\r\n              :cy=\"ctrHeight - (group[i-1].y - yLimits.min) * yScale\"\r\n              :r=\"pointSize\"\r\n              @mouseover=\"mouse_over_point($event, group[i-1].index)\"\r\n              @mouseleave=\"mouse_leave_point($event)\"\r\n            >\r\n              {{group[i-1].icon}}\r\n            </circle>\r\n          </g>\r\n        </g>\r\n\r\n        <!--connect points with lines-->\r\n        <g\r\n          id=\"linesGroup\"\r\n          v-if=\"connectPoints\"\r\n          :transform=\"translatePoints\"\r\n        >\r\n          <g v-for=\"group in getGroups\">\r\n            <line v-for=\"i in group.length-1\"\r\n              :style=\"{stroke: group[i-1].stroke}\"\r\n              :x1=\"(group[i-1].x - xLimits.min) * xScale\"\r\n              :y1=\"ctrHeight - (group[i-1].y - yLimits.min) * yScale\"\r\n              :x2=\"(group[i].x - xLimits.min) * xScale\"\r\n              :y2=\"ctrHeight - (group[i].y - yLimits.min) * yScale\"\r\n            >\r\n            </line>\r\n          </g>\r\n        </g>\r\n        <!--draw fit data-->\r\n        <g\r\n          v-if=\"fitData\"\r\n          id=\"fitGroup\"\r\n          :transform=\"translatePoints\"\r\n        >\r\n          <line\r\n            v-for=\"(item,index) in getFittedData\"\r\n            :key=\"index\"\r\n            :style=\"{stroke: fitPointColor}\"\r\n            :x1=\"(item.x1 - xLimits.min) * xScale\"\r\n            :y1=\"ctrHeight - (item.y1 - yLimits.min) * yScale\"\r\n            :x2=\"(item.x2 - xLimits.min) * xScale\"\r\n            :y2=\"ctrHeight - (item.y2 - yLimits.min) * yScale\"\r\n          />\r\n        </g>\r\n        \r\n        <!--draw legend-->\r\n        <g\r\n          v-if=\"grouping\"\r\n          id=\"legend\"\r\n          @mousedown=\"mouse_legend_down($event)\"\r\n          @mousemove=\"mouse_legend_move($event)\"\r\n          @mouseup=\"mouse_legend_end($event)\"\r\n          @mouseout=\"mouse_legend_end($event)\"\r\n        >\r\n\r\n          <circle\r\n            v-for=\"(item,key,index) in grouping\"\r\n            :key=\"index\"\r\n            :fill=\"item.fill\"\r\n            :cx=\".85 * ctrWidth\"\r\n            :cy=\"0.2 * ctrHeight + index * 30 - 5\"\r\n            :r=\"pointSize\"\r\n          />\r\n          <text\r\n            v-for=\"(item,key,index) in grouping\"\r\n            :key=\"index\"\r\n            :style=\"{stroke: item.stroke}\"\r\n            :x=\".85 * ctrWidth + 20\"\r\n            :y=\"0.2 * ctrHeight + index * 30\"\r\n          >\r\n            {{ key }}\r\n          </text>\r\n        </g>\r\n      </g>\r\n    </svg>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport nice_ticks from './nice_ticks';\r\nimport {mouse_down, mouse_move, mouse_end} from './mouse_move_event';\r\n\r\nexport default {\r\n  name: 'PointsPlotComp',\r\n  \r\n  props: {\r\n    x: {\r\n      type: Array,\r\n      default: null,\r\n      required: true\r\n    },\r\n    y: {\r\n      type: Array,\r\n      default: null,\r\n      required: true\r\n    },\r\n    grp: {\r\n      type: Array,\r\n      default: null\r\n    },\r\n    title: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    subTitle: {\r\n      type: String,\r\n      default: null\r\n    },\r\n    xLabel: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    yLabel: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    xAxis: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    yAxis: {\r\n      type: Object,\r\n      default: null\r\n    },\r\n    width: {\r\n      type: Number,\r\n      default: 800\r\n    },\r\n    height: {\r\n      type: Number,\r\n      default: 600\r\n    },\r\n    marginLeft: {\r\n      type: Number,\r\n      default:60\r\n    },\r\n    marginBottom: {\r\n      type: Number,\r\n      default: 60\r\n    },\r\n    pointStroke: {\r\n      type: String,\r\n      default: '#000000'\r\n    },\r\n    pointFill: {\r\n      type: String,\r\n      default: '#FFFFFF'\r\n    },\r\n    pointSize: {\r\n      type: Number,\r\n      default: 6\r\n    },\r\n    connectPoints: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    fitData: {\r\n      type: Array,\r\n      default:() => {\r\n        return null;\r\n      }\r\n    },\r\n    fitPointColor: {\r\n      type: String,\r\n      default: '#FF1940'\r\n    },\r\n    grouping: {\r\n      type: Object,\r\n      default: () => {\r\n        return {};\r\n      }\r\n    },\r\n    cssVariables: {\r\n      type: Object,\r\n      default: null\r\n    }\r\n  },\r\n  emits: {\r\n    'PointsPlotCompHover': null\r\n  },\r\n  data() {\r\n    return {\r\n      fit_data: null,\r\n      titleY: 20,\r\n      subtitleY: 45,\r\n      yLoc: 10,\r\n      ctrWidth: 0,\r\n      ctrHeight: 0,\r\n      yLabelStyle: {\r\n        transform: 'rotate(270deg)',\r\n        textAnchor: 'middle',\r\n        fontSize: '16px',\r\n        fontWeight: 'bold'\r\n      }\r\n    };\r\n  },\r\n  computed: {\r\n    drawXaxis(){\r\n      return `M 0 0 H ${this.ctrWidth}`\r\n    },\r\n    drawYaxis(){\r\n      return `M 0 0 V ${this.ctrHeight}`\r\n    },\r\n    xScale() {\r\n      return this.ctrWidth / (this.xLimits.max - this.xLimits.min);\r\n    },\r\n    xLimits() {\r\n      const xaxis = {\r\n        min: 0,\r\n        max: 1,\r\n        step: 1\r\n      };\r\n      if(this.xAxis !== null){\r\n        xaxis.min = this.xAxis.min;\r\n        xaxis.max = this.xAxis.max;\r\n        xaxis.step = this.xAxis.step;\r\n      }else if(this.x !== null){\r\n        const nice_tics = nice_ticks(this.x, 10);\r\n        xaxis.min = nice_tics.min;\r\n        xaxis.max = nice_tics.max;\r\n        xaxis.step = nice_tics.step;\r\n      }\r\n      return xaxis;\r\n    },\r\n    xTics() {\r\n      const xtics = [];\r\n      const xN = Math.round((this.xLimits.max - this.xLimits.min) / this.xLimits.step);\r\n      for(let i=0; i < xN + 1; i++){\r\n        const value = this.xLimits.min + i * this.xLimits.step;\r\n        xtics.push({\r\n          loc: (value - this.xLimits.min) * this.xScale,\r\n          label: value,\r\n        });\r\n      }\r\n      return xtics;\r\n    },\r\n    yScale() {\r\n      return this.ctrHeight / (this.yLimits.max - this.yLimits.min);\r\n    },\r\n    yLimits(){\r\n      const yaxis = {\r\n        min: 0,\r\n        max: 1,\r\n        step: 1\r\n      };\r\n      if(this.yAxis !== null){\r\n        yaxis.min = this.yAxis.min;\r\n        yaxis.max = this.yAxis.max;\r\n        yaxis.step = this.yAxis.step;\r\n      }else if(this.y !== null){\r\n        //console.log(`y: ${this.y}`);\r\n        const nice_tics = nice_ticks(this.y, 10);\r\n        yaxis.min = nice_tics.min;\r\n        yaxis.max = nice_tics.max;\r\n        yaxis.step = nice_tics.step;\r\n        //console.log(`ymin: ${yaxis.min} ymax: ${yaxis.max} step: ${yaxis.step}`);\r\n      }\r\n      return yaxis;\r\n    },\r\n    yTics() {\r\n      const ytics = [];\r\n      const yN = Math.round((this.yLimits.max - this.yLimits.min) / this.yLimits.step);\r\n      //console.log(`yN: ${yN} yScale: ${this.yScale}`);\r\n      for(let i=0; i < yN + 1; i++){\r\n        const value = this.yLimits.min + i * this.yLimits.step;\r\n       // console.log(`value: ${value}`);\r\n        ytics.push({\r\n          loc: this.ctrHeight - (i * this.yLimits.step * this.yScale),\r\n          label: value\r\n        });\r\n      }\r\n      return ytics;\r\n    },\r\n    translateXAxis(){\r\n      return `translate(${this.marginLeft} ${this.ctrHeight + this.yLoc})`\r\n    },\r\n    translateYAxis(){\r\n      return `translate(${this.marginLeft} ${this.yLoc})`\r\n    },\r\n    translatePoints(){\r\n      return `translate(${this.marginLeft} ${this.yLoc})`\r\n    },\r\n    getGroups(){\r\n      const groups = [];\r\n      let index = 0;\r\n      if(this.x !== null && this.y !== null){\r\n        // For non-grouping case\r\n        if(this.grp === null){\r\n          const group = [];\r\n          for(let i = 0; i < this.x.length; i++){\r\n            const obj = {\r\n              x: this.x[i],\r\n              y: this.y[i],\r\n              index: index,\r\n              stroke :this.pointStroke,\r\n              fill:this.pointFill,\r\n            }\r\n            group.push(obj);\r\n            index++;\r\n          }\r\n          groups.push(group);\r\n        }else{\r\n          const group_names = Object.keys(this.grouping);\r\n          const group_data = {};\r\n          for(let name of group_names){\r\n            group_data[name] = [];\r\n          }\r\n          for(let i = 0; i < this.x.length; i++){\r\n            if(group_names.indexOf(this.grp[i]) !== -1){\r\n              const obj = {\r\n                x: this.x[i],\r\n                y: this.y[i],\r\n                index: index,\r\n                stroke :this.grouping[this.grp[i]].stroke,\r\n                fill:this.grouping[this.grp[i]].fill\r\n              }\r\n              group_data[this.grp[i]].push(obj);\r\n              index++;\r\n            }\r\n          }\r\n          for(let key of Object.keys(group_data)){\r\n            groups.push(group_data[key]);\r\n          }\r\n        }\r\n      }\r\n      return groups;\r\n    },\r\n    getFittedData(){\r\n      const fitted_data = [];\r\n      for(let i=1; i < this.fitData.length; i++){\r\n        const obj = {};\r\n        obj.x1 = this.fitData[i - 1].x;\r\n        obj.y1 = this.fitData[i - 1].y;\r\n        obj.x2 = this.fitData[i].x;\r\n        obj.y2 = this.fitData[i].y;\r\n        fitted_data.push(obj);\r\n      }\r\n      return fitted_data;\r\n    }\r\n  },\r\n  mounted() {\r\n    if(this.cssVariables !== null){\r\n      for(let key of Object.keys(this.cssVariables)){\r\n        this.$el.style.setProperty(`--${key}`, this.cssVariables[key]);\r\n      }\r\n    }\r\n\r\n    if(this.title !== null) this.yLoc = this.yLoc + this.titleY;\r\n    if(this.subTitle !== null) this.yLoc = this.yLoc + this.subtitleY;\r\n    this.ctrWidth = this.width - this.marginLeft - 10;\r\n    this.ctrHeight = this.height - this.marginBottom - this.yLoc\r\n  },\r\n  methods: {\r\n    drawXtic(item){\r\n      return `M ${item.loc} 0 V 10 Z`\r\n    },\r\n    drawYtic(item){\r\n      //console.log(`tic label: ${item.label}`)\r\n      return `M 0 ${item.loc} H -10 Z`\r\n    },\r\n    mouse_legend_down(e){\r\n      return mouse_down(e)\r\n    },\r\n    mouse_legend_move(e){\r\n      return mouse_move(e);\r\n    },\r\n    mouse_legend_end(e){\r\n      return mouse_end(e);\r\n    },\r\n    mouse_over_point(e, index){\r\n      this.$emit('PointsPlotCompHover',{x: this.x[index], y: this.y[index]});\r\n    },\r\n    mouse_leave_point(e){\r\n      this.$emit('PointsPlotCompHover',{x: \"\", y: \"\"});\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n  :root {\r\n    --points_plot_comp_font_family: Verdana,serif;\r\n    --points_plot_comp_background: white;\r\n    --points_plot_comp_axis_color: black;\r\n    --points_plot_comp_point_opacity: 0.6;\r\n\r\n    --points_plot_comp_title_color: black;\r\n  }\r\n\r\n  #container {\r\n    font-family: var(--points_plot_comp_font_family);\r\n    background-color: var(--points_plot_comp_background);\r\n  }\r\n  .titles {\r\n    text-anchor: middle;\r\n    font-weight: bold;\r\n    fill: var(--points_plot_comp_title_color);\r\n  }\r\n  .ticLines {\r\n    stroke: var(--points_plot_comp_axis_color);\r\n  }\r\n  .ticLabels {\r\n    text-anchor: middle;\r\n    font-weight: bold;\r\n    font-size: 11px;\r\n    color: var(--points_plot_comp_axis_color);\r\n  }\r\n  .axisTitle {\r\n    text-anchor: middle;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    color: var(--points_plot_comp_axis_color);\r\n  }\r\n  .points {\r\n    opacity: var(--points_plot_comp_point_opacity);\r\n    cursor: pointer;\r\n  }\r\n  #legend {\r\n    cursor: move;\r\n    background: transparent;\r\n  }\r\n</style>"],"names":[],"version":3,"file":"PointsPlotComp.css.map"}